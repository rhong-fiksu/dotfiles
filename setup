#!/usr/bin/env ruby

require 'logger'
require 'find'

HOME = `echo ${HOME}`.chomp
DOTFILES_ROOT = File.dirname(File.expand_path(__FILE__))
INSTALLERS_ROOT = File.join(DOTFILES_ROOT, 'installers')
SYMLINKS_ROOT = File.join(DOTFILES_ROOT, 'symlinks')
LOGGER = Logger.new(STDOUT)

def execute
  output = yield
  LOGGER.debug(output) if output.length > 0
  unless $?.success?
    raise "Failed with exit status #{Integer($?.exitstatus)}"
  end
  output
end

def in_path?(cmd)
  `command -v #{cmd}`.length > 0
end

###

def install_homebrew
  if in_path?('brew')
    LOGGER.info('Homebrew already installed.')
    LOGGER.info('Updating brew taps...')
    execute { `brew update` }
  else
    LOGGER.info('Installing homebrew...')
    execute { `/usr/bin/env ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"` }
  end
  LOGGER.info('Installing brew cask...')
  execute { `brew tap caskroom/cask` }
end

def install_base_packages
  LOGGER.info('Installing base packages...')

  execute { `brew install zsh` }
  execute { `brew install coreutils` }
  # terminal color util configured in zsh
  execute { `brew install grc` }

  execute { `brew install git` }
  execute { `brew install ruby` }
  execute { `brew install vim` }
end

def install_applications
  LOGGER.info('Installing google-chrome...')
  execute { `brew cask install google-chrome` }
end

def run_installers
  Find.find(INSTALLERS_ROOT).select { |p| p =~ /install$/ }.each do |p|
    # Installers use their own logger instances, so just throw that into STDOUT
    STDOUT.puts(`#{p}`)
  end
end

def copy_symlinks
  Find.find(SYMLINKS_ROOT).select { |p| p =~ /\.symlink\Z/ }.each do |p|
    dotfile_name = p.split('/')[-1].split('.')[0]
    execute { `cp #{p} #{HOME}/.#{dotfile_name}` }
  end
end

install_homebrew
install_base_packages
install_applications
run_installers
copy_symlinks
